{"version":3,"sources":["registerServiceWorker.js","services/api.services.js","pages/login/login.js","router/router.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","api","userid","email","axios","post","userName","password","upper","middle","lower","short","long","userID","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","responseGoogle","response","createUser","profileObj","name","response1","data","setState","blocklist","user","autoload","history","push","concat","_id","full_name","renderlogin","bind","assertThisInitialized","renderform","updateblocklist","_this2","setUserBlockList","refs","checked","_this3","react_default","a","createElement","className","type","ref","onClick","google_login_default","clientId","buttonText","autoLoad","onSuccess","onFailure","React","Component","withRouter","ReactRouter","BrowserRouter","basename","Switch","Route","path","component","Redirect_default","from","to","ReactDOM","render","router","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"mNAUMA,eAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,+FCpDlDC,EADH,uGArBGC,EAAQC,GACf,OAAOC,IAAMC,KAAK,4CAA6C,CAC3DC,SAAUJ,EACVK,SAAU,SACVJ,MAAOA,6CAIED,EAAQM,EAAOC,EAAQC,EAAOC,EAAOC,GAClD,OAAOR,IAAMC,KAAK,kDAAmD,CACjEQ,OAAQX,EACRM,MAAOA,EACPC,OAAQA,EACRC,MAAOA,EACPE,KAAMA,EACND,MAAOA,uCCZbG,qBACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaVQ,eAAiB,SAACC,GACdvB,EAAIwB,WAAWD,EAASE,WAAWC,KAAMH,EAASE,WAAWvB,OACxDd,KAAK,SAAAuC,GAC8B,MAA5BA,EAAUC,KAAKtB,SACfS,EAAKc,SAAS,CACVC,WAAW,EACXC,KAAMJ,EAAUC,KAChBI,UAAU,IAIdjB,EAAKD,MAAMmB,QAAQC,KAAnB,SAAAC,OAAiCR,EAAUC,KAAKQ,IAAhD,KAAAD,OAAuDR,EAAUC,KAAKS,cAG7EvC,MAAM,SAAAC,GACHH,QAAQC,IAAIE,MA1BpBgB,EAAKrB,MAAQ,CACToC,WAAW,EACXC,KAAM,GACNC,UAAU,GAEdjB,EAAKuB,YAAcvB,EAAKuB,YAAYC,KAAjBvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAD,KACnBA,EAAK0B,WAAa1B,EAAK0B,WAAWF,KAAhBvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAD,KAClBA,EAAK2B,gBAAkB3B,EAAK2B,gBAAgBH,KAArBvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAD,KACvBA,EAAKO,eAAiBP,EAAKO,eAAeiB,KAApBvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAD,KAXPA,iFAkCD,IAAA4B,EAAAzB,KACdlB,EAAI4C,iBAAiB1B,KAAKxB,MAAMqC,KAAKK,IAAKlB,KAAK2B,KAAKtC,MAAMuC,QAAS5B,KAAK2B,KAAKrC,OAAOsC,QAAS5B,KAAK2B,KAAKpC,MAAMqC,QAAS5B,KAAK2B,KAAKnC,MAAMoC,QAAS5B,KAAK2B,KAAKlC,KAAKmC,SACzJ1D,KAAK,SAAAuC,GACFgB,EAAKd,SAAS,CACVC,WAAW,MAGlBhC,MAAM,SAAAC,GACHH,QAAQC,IAAIE,0CAIX,IAAAgD,EAAA7B,KAET,OADAtB,QAAQC,IAAIqB,KAAKxB,MAAMqC,MAEnBiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,WAAqCjC,KAAKxB,MAAMqC,KAAKM,UAArD,KACAW,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,oDACAH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAjB,SACAH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,IAAI,UACvBL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAEpBH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAjB,UACAH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,IAAI,WACvBL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAEpBH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAjB,SACAH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,IAAI,UACvBL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAGxBH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,sCACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAjB,QACAH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,IAAI,SACvBL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAEpBH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAjB,SACAH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,IAAI,UACvBL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAGxBH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBC,KAAK,SAASE,QAAS,kBAAMP,EAAKL,oBAApE,8CAOZ,OACIM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACPH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,YACAH,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACIO,SAAS,4EACTC,WAAW,oBACXN,UAAU,eACVO,SAAUxC,KAAKxB,MAAMsC,SACrB2B,UAAWzC,KAAKI,eAChBsC,UAAW1C,KAAKI,mDAShC,OACIJ,KAAKxB,MAAMoC,UAAYZ,KAAKuB,aAAevB,KAAKoB,qBA9GxCuB,IAAMC,YAoHXC,cAAWlD,oBC3GXmD,EAXK,WAChB,OACIhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAQC,SAAU,uCACdlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACInB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAI,SAAYC,UAAWzD,IAClCmC,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CAAUuB,KAAI,IAAQC,GAAE,cCHxCC,IAASC,OACL3B,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAAC0B,EAAD,OAEFC,SAASC,eAAe,SJQf,WACb,GAA6C,kBAAmB7F,UAAW,CAGzE,GADkB,IAAI8F,IAAIC,sCAAwBrG,OAAOC,UAC3CqG,SAAWtG,OAAOC,SAASqG,OAIvC,OAGFtG,OAAOuG,iBAAiB,OAAQ,WAC9B,IAAMlG,EAAK,GAAAmD,OAAM6C,sCAAN,sBAEPvG,GAiDV,SAAiCO,GAE/BmG,MAAMnG,GACHI,KAAK,SAAAmC,GAGkB,MAApBA,EAAS6D,SACuD,IAAhE7D,EAAS8D,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CtG,UAAUC,cAAcsG,MAAMpG,KAAK,SAAAC,GACjCA,EAAaoG,aAAarG,KAAK,WAC7BT,OAAOC,SAAS8G,aAKpB3G,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEArEA8F,CAAwB3G,GAIxBC,UAAUC,cAAcsG,MAAMpG,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MInCxB4G","file":"static/js/main.e9b66c10.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\n\nclass ApiService {\n    \n\n    createUser(userid, email) {\n        return axios.post('https://bodyfitx.herokuapp.com/createUser', {\n            userName: userid,\n            password: \"111111\",\n            email: email,\n        });\n    }\n\n    setUserBlockList(userid, upper, middle, lower, short, long) {\n        return axios.post('https://bodyfitx.herokuapp.com/setUserBlockList', {\n            userID: userid,\n            upper: upper,\n            middle: middle,\n            lower: lower,\n            long: long,\n            short: short\n        });\n    }\n  \n\n}\nconst api = new ApiService();\nexport default api;","\nimport React from 'react';\nimport api from '../../services/api.services';\nimport { withRouter } from 'react-router-dom';\nimport GoogleLogin from 'react-google-login';\nimport './login.css';\n\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            blocklist: false,\n            user: '',\n            autoload: false\n        }\n        this.renderlogin = this.renderlogin.bind(this);\n        this.renderform = this.renderform.bind(this);\n        this.updateblocklist = this.updateblocklist.bind(this);\n        this.responseGoogle = this.responseGoogle.bind(this);\n    }\n\n    responseGoogle = (response) => {\n        api.createUser(response.profileObj.name, response.profileObj.email)\n            .then(response1 => {\n                if (response1.data.password === \"0\") {\n                    this.setState({\n                        blocklist: true,\n                        user: response1.data,\n                        autoload: true\n                    })\n                }\n                else {\n                    this.props.history.push(`/home/${response1.data._id}/${response1.data.full_name}`);\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            });\n\n    }\n\n    updateblocklist() {\n        api.setUserBlockList(this.state.user._id, this.refs.upper.checked, this.refs.middle.checked, this.refs.lower.checked, this.refs.short.checked, this.refs.long.checked)\n            .then(response1 => {\n                this.setState({\n                    blocklist: false\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n\n    renderform() {\n        console.log(this.state.user);\n        return (\n            <div className=\"loginBg\">\n                <h1 className=\"header-font\">Welcome {this.state.user.full_name} </h1>\n                <br/>\n                <br/>\n                <h3 className=\"header-font\">What area of the body you would like to work on?</h3>\n                <form>\n                    <div className=\"block-list-div\">\n                        <label className=\"container\"> upper\n                        <input type=\"checkbox\" ref=\"upper\" />\n                            <span className=\"checkmark\"></span>\n                        </label>\n                        <label className=\"container\"> middle\n                        <input type=\"checkbox\" ref=\"middle\" />\n                            <span className=\"checkmark\"></span>\n                        </label>\n                        <label className=\"container\"> lower\n                        <input type=\"checkbox\" ref=\"lower\" />\n                            <span className=\"checkmark\"></span>\n                        </label>\n                    </div>\n                    <br/>\n                    <br/>\n                    <h3 className=\"header-font\">How would you like your training ?</h3>\n                    <div className=\"block-list-div\">\n                        <label className=\"container\"> long\n                        <input type=\"checkbox\" ref=\"long\"/>\n                            <span className=\"checkmark\"></span>\n                        </label>\n                        <label className=\"container\"> short\n                        <input type=\"checkbox\" ref=\"short\" />\n                            <span className=\"checkmark\"></span>\n                        </label>\n                    </div>\n                    <br/>\n                    <button className=\"update-button\" type=\"button\" onClick={() => this.updateblocklist()}>GO</button>\n                </form>\n            </div>\n        );\n    }\n\n    renderlogin() {\n        return (\n            <div className=\"loginBg\">\n                    <h1 className=\"header-font\">body-fit</h1>\n                    <GoogleLogin\n                        clientId=\"1022951333426-b1ogj66n03jv6afgraq22ppqq275fgdu.apps.googleusercontent.com\"\n                        buttonText=\"Login with Google\"\n                        className=\"google-login\"\n                        autoLoad={this.state.autoload}\n                        onSuccess={this.responseGoogle}\n                        onFailure={this.responseGoogle}\n                    />\n            </div>\n        );\n    }\n\n\n\n    render() {\n        return (\n            this.state.blocklist ? this.renderform() : this.renderlogin()\n        );\n\n    }\n}\n\nexport default withRouter(Login);\n\n\n\n\n\n\n","import React from \"react\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport Login from '../../src/pages/login/login';\nimport Redirect from \"react-router-dom/Redirect\";\n\n\nconst ReactRouter = () => {\n    return (\n        <Router basename={'/2018-2019/dcs/dev_271/body-fit-app'}>\n            <Switch>\n                <Route path={`/login`} component={Login} />\n                <Redirect from ={`/`} to={`/login`}/>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default ReactRouter;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-notifications/lib/notifications.css';\nimport registerServiceWorker from './registerServiceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport ReactRouter from './router/router'\n\nReactDOM.render(\n    <Router>\n        <ReactRouter/>\n    </Router>\n    , document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}